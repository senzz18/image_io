cmake_minimum_required(VERSION 3.13)
project(
  image_io_test
  LANGUAGES CXX
  DESCRIPTION "image_io test")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "^[xX]86_64$|^[aA][mM][dD]64$")
  if(CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mtune=native -march=native")
  endif()
  if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:AVX2 /EHsc /D \"_CRT_SECURE_NO_WARNINGS\"")
	  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} /Od /DDEBUG /ZI")
	  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} /Ox")
	  set(CMAKE_CXX_FLAGS_RelWithDebInfo "${CMAKE_CXX_FLAGS} /O2 /ZI")
  endif()
endif()

if(APPLE)
  if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "^arm64")
    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
      message(STATUS "add -mcpu=apple-m1")
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=apple-m1 -mtune=native")
    endif()
  endif()
else()
  if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "^aarch64")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv8-a -mtune=cortex-a72")
    if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flax-vector-conversions")
    endif()
  endif()
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdiagnostics-color=always")
endif()
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fcolor-diagnostics")
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -O0 -g")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -O3 -flto")
  set(CMAKE_CXX_FLAGS_RelWithDebInfo "${CMAKE_CXX_FLAGS} -O2 -g")
endif()


add_executable(image_io_test main.cpp image_io.cpp pgm_io.cpp pgx_io.cpp)
# find_package(OpenMP REQUIRED)
# if(OpenMP_FOUND)
#   message(STATUS "OpenMP is found.")
#   target_compile_definitions(image_io_test PUBLIC USE_OPENMP)
#   target_link_libraries(image_io_test PRIVATE OpenMP::OpenMP_CXX)
# endif()

# find_package(OpenCV)
# if(OpenCV_FOUND)
#   message(STATUS "OpenCV is found.")
#   target_compile_definitions(image_io_test PUBLIC USE_OPENCV)
#   target_include_directories(image_io_test PUBLIC ${OpenCV_INCLUDE_DIRS})
#   target_link_libraries(image_io_test ${OpenCV_LIBS})
# endif()
set_target_properties(
  image_io_test
  PROPERTIES OUTPUT_NAME $<IF:$<CONFIG:Debug>,image_io_test_dbg,image_io_test>)
