//
// Created by OSAMU WATANABE on 2022/12/19.
//

#ifndef IMAGE_IO_TEST_TBL_CBRT_H
#define IMAGE_IO_TEST_TBL_CBRT_H

#include "typedef.hpp"

constexpr ui16 tbl_cbrt_fine[1024] = {
    0x0,    0x1966, 0x2000, 0x24A1, 0x2851, 0x2B6E, 0x2E27, 0x3096, 0x32CC, 0x34D5, 0x36B8, 0x387C, 0x3A26,
    0x3BB8, 0x3D37, 0x3EA3, 0x4000, 0x414E, 0x4290, 0x43C6, 0x44F1, 0x4612, 0x472B, 0x483B, 0x4943, 0x4A44,
    0x4B3E, 0x4C32, 0x4D20, 0x4E08, 0x4EEB, 0x4FC9, 0x50A2, 0x5177, 0x5248, 0x5314, 0x53DD, 0x54A2, 0x5563,
    0x5621, 0x56DC, 0x5794, 0x5849, 0x58FB, 0x59AA, 0x5A57, 0x5B01, 0x5BA8, 0x5C4E, 0x5CF1, 0x5D91, 0x5E30,
    0x5ECD, 0x5F67, 0x6000, 0x6097, 0x612B, 0x61BF, 0x6250, 0x62E0, 0x636E, 0x63FB, 0x6486, 0x6510, 0x6598,
    0x661E, 0x66A4, 0x6728, 0x67AB, 0x682C, 0x68AC, 0x692B, 0x69A9, 0x6A26, 0x6AA1, 0x6B1C, 0x6B95, 0x6C0D,
    0x6C85, 0x6CFB, 0x6D70, 0x6DE4, 0x6E58, 0x6ECA, 0x6F3B, 0x6FAC, 0x701C, 0x708A, 0x70F8, 0x7165, 0x71D2,
    0x723D, 0x72A8, 0x7312, 0x737B, 0x73E4, 0x744B, 0x74B2, 0x7519, 0x757E, 0x75E3, 0x7648, 0x76AB, 0x770E,
    0x7770, 0x77D2, 0x7833, 0x7894, 0x78F4, 0x7953, 0x79B1, 0x7A10, 0x7A6D, 0x7ACA, 0x7B27, 0x7B83, 0x7BDE,
    0x7C39, 0x7C93, 0x7CED, 0x7D46, 0x7D9F, 0x7DF7, 0x7E4F, 0x7EA7, 0x7EFE, 0x7F54, 0x7FAA, 0x8000, 0x8055,
    0x80A9, 0x80FE, 0x8152, 0x81A5, 0x81F8, 0x824A, 0x829D, 0x82EE, 0x8340, 0x8391, 0x83E1, 0x8431, 0x8481,
    0x84D1, 0x8520, 0x856E, 0x85BD, 0x860B, 0x8658, 0x86A6, 0x86F3, 0x873F, 0x878C, 0x87D7, 0x8823, 0x886E,
    0x88B9, 0x8904, 0x894E, 0x8998, 0x89E2, 0x8A2B, 0x8A74, 0x8ABD, 0x8B06, 0x8B4E, 0x8B96, 0x8BDD, 0x8C25,
    0x8C6C, 0x8CB2, 0x8CF9, 0x8D3F, 0x8D85, 0x8DCB, 0x8E10, 0x8E55, 0x8E9A, 0x8EDF, 0x8F23, 0x8F67, 0x8FAB,
    0x8FEF, 0x9032, 0x9075, 0x90B8, 0x90FB, 0x913D, 0x917F, 0x91C1, 0x9203, 0x9244, 0x9286, 0x92C7, 0x9307,
    0x9348, 0x9388, 0x93C8, 0x9408, 0x9448, 0x9488, 0x94C7, 0x9506, 0x9545, 0x9583, 0x95C2, 0x9600, 0x963E,
    0x967C, 0x96BA, 0x96F7, 0x9734, 0x9771, 0x97AE, 0x97EB, 0x9827, 0x9864, 0x98A0, 0x98DC, 0x9917, 0x9953,
    0x998E, 0x99C9, 0x9A05, 0x9A3F, 0x9A7A, 0x9AB5, 0x9AEF, 0x9B29, 0x9B63, 0x9B9D, 0x9BD6, 0x9C10, 0x9C49,
    0x9C82, 0x9CBB, 0x9CF4, 0x9D2D, 0x9D65, 0x9D9E, 0x9DD6, 0x9E0E, 0x9E46, 0x9E7E, 0x9EB5, 0x9EED, 0x9F24,
    0x9F5B, 0x9F92, 0x9FC9, 0xA000, 0xA036, 0xA06D, 0xA0A3, 0xA0D9, 0xA10F, 0xA145, 0xA17A, 0xA1B0, 0xA1E5,
    0xA21B, 0xA250, 0xA285, 0xA2BA, 0xA2EE, 0xA323, 0xA357, 0xA38C, 0xA3C0, 0xA3F4, 0xA428, 0xA45C, 0xA48F,
    0xA4C3, 0xA4F6, 0xA52A, 0xA55D, 0xA590, 0xA5C3, 0xA5F6, 0xA628, 0xA65B, 0xA68E, 0xA6C0, 0xA6F2, 0xA724,
    0xA756, 0xA788, 0xA7BA, 0xA7EB, 0xA81D, 0xA84E, 0xA880, 0xA8B1, 0xA8E2, 0xA913, 0xA944, 0xA974, 0xA9A5,
    0xA9D6, 0xAA06, 0xAA36, 0xAA67, 0xAA97, 0xAAC7, 0xAAF7, 0xAB26, 0xAB56, 0xAB86, 0xABB5, 0xABE4, 0xAC14,
    0xAC43, 0xAC72, 0xACA1, 0xACD0, 0xACFE, 0xAD2D, 0xAD5C, 0xAD8A, 0xADB9, 0xADE7, 0xAE15, 0xAE43, 0xAE71,
    0xAE9F, 0xAECD, 0xAEFB, 0xAF28, 0xAF56, 0xAF83, 0xAFB0, 0xAFDE, 0xB00B, 0xB038, 0xB065, 0xB092, 0xB0BF,
    0xB0EB, 0xB118, 0xB144, 0xB171, 0xB19D, 0xB1C9, 0xB1F6, 0xB222, 0xB24E, 0xB27A, 0xB2A6, 0xB2D1, 0xB2FD,
    0xB329, 0xB354, 0xB380, 0xB3AB, 0xB3D6, 0xB401, 0xB42C, 0xB458, 0xB482, 0xB4AD, 0xB4D8, 0xB503, 0xB52D,
    0xB558, 0xB582, 0xB5AD, 0xB5D7, 0xB601, 0xB62C, 0xB656, 0xB680, 0xB6AA, 0xB6D4, 0xB6FD, 0xB727, 0xB751,
    0xB77A, 0xB7A4, 0xB7CD, 0xB7F6, 0xB820, 0xB849, 0xB872, 0xB89B, 0xB8C4, 0xB8ED, 0xB916, 0xB93F, 0xB967,
    0xB990, 0xB9B9, 0xB9E1, 0xBA0A, 0xBA32, 0xBA5A, 0xBA82, 0xBAAB, 0xBAD3, 0xBAFB, 0xBB23, 0xBB4B, 0xBB72,
    0xBB9A, 0xBBC2, 0xBBE9, 0xBC11, 0xBC38, 0xBC60, 0xBC87, 0xBCAF, 0xBCD6, 0xBCFD, 0xBD24, 0xBD4B, 0xBD72,
    0xBD99, 0xBDC0, 0xBDE7, 0xBE0D, 0xBE34, 0xBE5B, 0xBE81, 0xBEA8, 0xBECE, 0xBEF5, 0xBF1B, 0xBF41, 0xBF67,
    0xBF8D, 0xBFB4, 0xBFDA, 0xBFFF, 0xC025, 0xC04B, 0xC071, 0xC097, 0xC0BC, 0xC0E2, 0xC108, 0xC12D, 0xC152,
    0xC178, 0xC19D, 0xC1C2, 0xC1E8, 0xC20D, 0xC232, 0xC257, 0xC27C, 0xC2A1, 0xC2C6, 0xC2EB, 0xC30F, 0xC334,
    0xC359, 0xC37D, 0xC3A2, 0xC3C6, 0xC3EB, 0xC40F, 0xC434, 0xC458, 0xC47C, 0xC4A0, 0xC4C4, 0xC4E9, 0xC50D,
    0xC531, 0xC554, 0xC578, 0xC59C, 0xC5C0, 0xC5E4, 0xC607, 0xC62B, 0xC64F, 0xC672, 0xC696, 0xC6B9, 0xC6DC,
    0xC700, 0xC723, 0xC746, 0xC769, 0xC78D, 0xC7B0, 0xC7D3, 0xC7F6, 0xC819, 0xC83B, 0xC85E, 0xC881, 0xC8A4,
    0xC8C7, 0xC8E9, 0xC90C, 0xC92E, 0xC951, 0xC973, 0xC996, 0xC9B8, 0xC9DB, 0xC9FD, 0xCA1F, 0xCA41, 0xCA63,
    0xCA86, 0xCAA8, 0xCACA, 0xCAEC, 0xCB0E, 0xCB2F, 0xCB51, 0xCB73, 0xCB95, 0xCBB7, 0xCBD8, 0xCBFA, 0xCC1B,
    0xCC3D, 0xCC5E, 0xCC80, 0xCCA1, 0xCCC3, 0xCCE4, 0xCD05, 0xCD27, 0xCD48, 0xCD69, 0xCD8A, 0xCDAB, 0xCDCC,
    0xCDED, 0xCE0E, 0xCE2F, 0xCE50, 0xCE71, 0xCE91, 0xCEB2, 0xCED3, 0xCEF4, 0xCF14, 0xCF35, 0xCF55, 0xCF76,
    0xCF96, 0xCFB7, 0xCFD7, 0xCFF7, 0xD018, 0xD038, 0xD058, 0xD078, 0xD099, 0xD0B9, 0xD0D9, 0xD0F9, 0xD119,
    0xD139, 0xD159, 0xD178, 0xD198, 0xD1B8, 0xD1D8, 0xD1F8, 0xD217, 0xD237, 0xD257, 0xD276, 0xD296, 0xD2B5,
    0xD2D5, 0xD2F4, 0xD314, 0xD333, 0xD352, 0xD372, 0xD391, 0xD3B0, 0xD3CF, 0xD3EE, 0xD40D, 0xD42C, 0xD44C,
    0xD46B, 0xD489, 0xD4A8, 0xD4C7, 0xD4E6, 0xD505, 0xD524, 0xD543, 0xD561, 0xD580, 0xD59F, 0xD5BD, 0xD5DC,
    0xD5FA, 0xD619, 0xD637, 0xD656, 0xD674, 0xD693, 0xD6B1, 0xD6CF, 0xD6EE, 0xD70C, 0xD72A, 0xD748, 0xD766,
    0xD784, 0xD7A3, 0xD7C1, 0xD7DF, 0xD7FD, 0xD81B, 0xD839, 0xD856, 0xD874, 0xD892, 0xD8B0, 0xD8CE, 0xD8EB,
    0xD909, 0xD927, 0xD944, 0xD962, 0xD980, 0xD99D, 0xD9BB, 0xD9D8, 0xD9F5, 0xDA13, 0xDA30, 0xDA4E, 0xDA6B,
    0xDA88, 0xDAA5, 0xDAC3, 0xDAE0, 0xDAFD, 0xDB1A, 0xDB37, 0xDB54, 0xDB71, 0xDB8E, 0xDBAB, 0xDBC8, 0xDBE5,
    0xDC02, 0xDC1F, 0xDC3C, 0xDC59, 0xDC76, 0xDC92, 0xDCAF, 0xDCCC, 0xDCE8, 0xDD05, 0xDD22, 0xDD3E, 0xDD5B,
    0xDD77, 0xDD94, 0xDDB0, 0xDDCD, 0xDDE9, 0xDE05, 0xDE22, 0xDE3E, 0xDE5A, 0xDE77, 0xDE93, 0xDEAF, 0xDECB,
    0xDEE7, 0xDF04, 0xDF20, 0xDF3C, 0xDF58, 0xDF74, 0xDF90, 0xDFAC, 0xDFC8, 0xDFE4, 0xDFFF, 0xE01B, 0xE037,
    0xE053, 0xE06F, 0xE08A, 0xE0A6, 0xE0C2, 0xE0DD, 0xE0F9, 0xE115, 0xE130, 0xE14C, 0xE167, 0xE183, 0xE19E,
    0xE1BA, 0xE1D5, 0xE1F1, 0xE20C, 0xE227, 0xE243, 0xE25E, 0xE279, 0xE294, 0xE2B0, 0xE2CB, 0xE2E6, 0xE301,
    0xE31C, 0xE337, 0xE352, 0xE36E, 0xE389, 0xE3A4, 0xE3BF, 0xE3D9, 0xE3F4, 0xE40F, 0xE42A, 0xE445, 0xE460,
    0xE47B, 0xE495, 0xE4B0, 0xE4CB, 0xE4E6, 0xE500, 0xE51B, 0xE535, 0xE550, 0xE56B, 0xE585, 0xE5A0, 0xE5BA,
    0xE5D5, 0xE5EF, 0xE60A, 0xE624, 0xE63E, 0xE659, 0xE673, 0xE68D, 0xE6A8, 0xE6C2, 0xE6DC, 0xE6F6, 0xE711,
    0xE72B, 0xE745, 0xE75F, 0xE779, 0xE793, 0xE7AD, 0xE7C7, 0xE7E1, 0xE7FB, 0xE815, 0xE82F, 0xE849, 0xE863,
    0xE87D, 0xE897, 0xE8B1, 0xE8CA, 0xE8E4, 0xE8FE, 0xE918, 0xE931, 0xE94B, 0xE965, 0xE97E, 0xE998, 0xE9B2,
    0xE9CB, 0xE9E5, 0xE9FE, 0xEA18, 0xEA31, 0xEA4B, 0xEA64, 0xEA7E, 0xEA97, 0xEAB1, 0xEACA, 0xEAE3, 0xEAFD,
    0xEB16, 0xEB2F, 0xEB49, 0xEB62, 0xEB7B, 0xEB94, 0xEBAD, 0xEBC7, 0xEBE0, 0xEBF9, 0xEC12, 0xEC2B, 0xEC44,
    0xEC5D, 0xEC76, 0xEC8F, 0xECA8, 0xECC1, 0xECDA, 0xECF3, 0xED0C, 0xED25, 0xED3D, 0xED56, 0xED6F, 0xED88,
    0xEDA1, 0xEDB9, 0xEDD2, 0xEDEB, 0xEE04, 0xEE1C, 0xEE35, 0xEE4D, 0xEE66, 0xEE7F, 0xEE97, 0xEEB0, 0xEEC8,
    0xEEE1, 0xEEF9, 0xEF12, 0xEF2A, 0xEF43, 0xEF5B, 0xEF73, 0xEF8C, 0xEFA4, 0xEFBD, 0xEFD5, 0xEFED, 0xF005,
    0xF01E, 0xF036, 0xF04E, 0xF066, 0xF07F, 0xF097, 0xF0AF, 0xF0C7, 0xF0DF, 0xF0F7, 0xF10F, 0xF127, 0xF13F,
    0xF157, 0xF16F, 0xF187, 0xF19F, 0xF1B7, 0xF1CF, 0xF1E7, 0xF1FF, 0xF217, 0xF22F, 0xF246, 0xF25E, 0xF276,
    0xF28E, 0xF2A6, 0xF2BD, 0xF2D5, 0xF2ED, 0xF304, 0xF31C, 0xF334, 0xF34B, 0xF363, 0xF37B, 0xF392, 0xF3AA,
    0xF3C1, 0xF3D9, 0xF3F0, 0xF408, 0xF41F, 0xF437, 0xF44E, 0xF465, 0xF47D, 0xF494, 0xF4AC, 0xF4C3, 0xF4DA,
    0xF4F2, 0xF509, 0xF520, 0xF537, 0xF54F, 0xF566, 0xF57D, 0xF594, 0xF5AB, 0xF5C3, 0xF5DA, 0xF5F1, 0xF608,
    0xF61F, 0xF636, 0xF64D, 0xF664, 0xF67B, 0xF692, 0xF6A9, 0xF6C0, 0xF6D7, 0xF6EE, 0xF705, 0xF71C, 0xF733,
    0xF74A, 0xF761, 0xF777, 0xF78E, 0xF7A5, 0xF7BC, 0xF7D3, 0xF7E9, 0xF800, 0xF817, 0xF82D, 0xF844, 0xF85B,
    0xF872, 0xF888, 0xF89F, 0xF8B5, 0xF8CC, 0xF8E3, 0xF8F9, 0xF910, 0xF926, 0xF93D, 0xF953, 0xF96A, 0xF980,
    0xF997, 0xF9AD, 0xF9C3, 0xF9DA, 0xF9F0, 0xFA07, 0xFA1D, 0xFA33, 0xFA4A, 0xFA60, 0xFA76, 0xFA8D, 0xFAA3,
    0xFAB9, 0xFACF, 0xFAE5, 0xFAFC, 0xFB12, 0xFB28, 0xFB3E, 0xFB54, 0xFB6A, 0xFB81, 0xFB97, 0xFBAD, 0xFBC3,
    0xFBD9, 0xFBEF, 0xFC05, 0xFC1B, 0xFC31, 0xFC47, 0xFC5D, 0xFC73, 0xFC89, 0xFC9F, 0xFCB5, 0xFCCA, 0xFCE0,
    0xFCF6, 0xFD0C, 0xFD22, 0xFD38, 0xFD4D, 0xFD63, 0xFD79, 0xFD8F, 0xFDA4, 0xFDBA, 0xFDD0, 0xFDE6, 0xFDFB,
    0xFE11, 0xFE27, 0xFE3C, 0xFE52, 0xFE67, 0xFE7D, 0xFE93, 0xFEA8, 0xFEBE, 0xFED3, 0xFEE9, 0xFEFE, 0xFF14,
    0xFF29, 0xFF3F, 0xFF54, 0xFF6A, 0xFF7F, 0xFF94, 0xFFAA, 0xFFBF, 0xFFD5, 0xFFEA};

constexpr ui16 tbl_cbrt[256] = {
    0x0,    0x2851, 0x32CC, 0x3A26, 0x4000, 0x44F1, 0x4943, 0x4D20, 0x50A2, 0x53DD, 0x56DC, 0x59AA, 0x5C4E,
    0x5ECD, 0x612B, 0x636E, 0x6598, 0x67AB, 0x69A9, 0x6B95, 0x6D70, 0x6F3B, 0x70F8, 0x72A8, 0x744B, 0x75E3,
    0x7770, 0x78F4, 0x7A6D, 0x7BDE, 0x7D46, 0x7EA7, 0x8000, 0x8152, 0x829D, 0x83E1, 0x8520, 0x8658, 0x878C,
    0x88B9, 0x89E2, 0x8B06, 0x8C25, 0x8D3F, 0x8E55, 0x8F67, 0x9075, 0x917F, 0x9286, 0x9388, 0x9488, 0x9583,
    0x967C, 0x9771, 0x9864, 0x9953, 0x9A3F, 0x9B29, 0x9C10, 0x9CF4, 0x9DD6, 0x9EB5, 0x9F92, 0xA06D, 0xA145,
    0xA21B, 0xA2EE, 0xA3C0, 0xA48F, 0xA55D, 0xA628, 0xA6F2, 0xA7BA, 0xA880, 0xA944, 0xAA06, 0xAAC7, 0xAB86,
    0xAC43, 0xACFE, 0xADB9, 0xAE71, 0xAF28, 0xAFDE, 0xB092, 0xB144, 0xB1F6, 0xB2A6, 0xB354, 0xB401, 0xB4AD,
    0xB558, 0xB601, 0xB6AA, 0xB751, 0xB7F6, 0xB89B, 0xB93F, 0xB9E1, 0xBA82, 0xBB23, 0xBBC2, 0xBC60, 0xBCFD,
    0xBD99, 0xBE34, 0xBECE, 0xBF67, 0xBFFF, 0xC097, 0xC12D, 0xC1C2, 0xC257, 0xC2EB, 0xC37D, 0xC40F, 0xC4A0,
    0xC531, 0xC5C0, 0xC64F, 0xC6DC, 0xC769, 0xC7F6, 0xC881, 0xC90C, 0xC996, 0xCA1F, 0xCAA8, 0xCB2F, 0xCBB7,
    0xCC3D, 0xCCC3, 0xCD48, 0xCDCC, 0xCE50, 0xCED3, 0xCF55, 0xCFD7, 0xD058, 0xD0D9, 0xD159, 0xD1D8, 0xD257,
    0xD2D5, 0xD352, 0xD3CF, 0xD44C, 0xD4C7, 0xD543, 0xD5BD, 0xD637, 0xD6B1, 0xD72A, 0xD7A3, 0xD81B, 0xD892,
    0xD909, 0xD980, 0xD9F5, 0xDA6B, 0xDAE0, 0xDB54, 0xDBC8, 0xDC3C, 0xDCAF, 0xDD22, 0xDD94, 0xDE05, 0xDE77,
    0xDEE7, 0xDF58, 0xDFC8, 0xE037, 0xE0A6, 0xE115, 0xE183, 0xE1F1, 0xE25E, 0xE2CB, 0xE337, 0xE3A4, 0xE40F,
    0xE47B, 0xE4E6, 0xE550, 0xE5BA, 0xE624, 0xE68D, 0xE6F6, 0xE75F, 0xE7C7, 0xE82F, 0xE897, 0xE8FE, 0xE965,
    0xE9CB, 0xEA31, 0xEA97, 0xEAFD, 0xEB62, 0xEBC7, 0xEC2B, 0xEC8F, 0xECF3, 0xED56, 0xEDB9, 0xEE1C, 0xEE7F,
    0xEEE1, 0xEF43, 0xEFA4, 0xF005, 0xF066, 0xF0C7, 0xF127, 0xF187, 0xF1E7, 0xF246, 0xF2A6, 0xF304, 0xF363,
    0xF3C1, 0xF41F, 0xF47D, 0xF4DA, 0xF537, 0xF594, 0xF5F1, 0xF64D, 0xF6A9, 0xF705, 0xF761, 0xF7BC, 0xF817,
    0xF872, 0xF8CC, 0xF926, 0xF980, 0xF9DA, 0xFA33, 0xFA8D, 0xFAE5, 0xFB3E, 0xFB97, 0xFBEF, 0xFC47, 0xFC9F,
    0xFCF6, 0xFD4D, 0xFDA4, 0xFDFB, 0xFE52, 0xFEA8, 0xFEFE, 0xFF54, 0xFFAA};

/**
 * @brief Derive cubic root of input (Q16 format of value 0.0 - 1.0)
 *
 * @param N
 * @return cbrt(N)
 */
inline ui16 cbrt_lut(ui16 N) {
  ui16 ret;
  if (N == 0U) {
    return 0U;
  }
  if (N == 65535U) {
    return 65535U;
  }
  size_t idx = N >> 8;  // Quantize pixel value to 8 bit (256 bins)
  ui16 val0  = tbl_cbrt[idx];
  ui16 val1  = (idx < 255) ? tbl_cbrt[idx + 1] : 65535U;
  ui32 tmp;
  if ((N & 0xFF) == 0) {
    ret = val0;
  } else {
    // Derive cubic root value by linear interpolation with LUT
    // ret = static_cast<ui16>(val0 + ((val1 - val0) / 256.0) * (N - (N & 0xFF00)));
    tmp = (static_cast<ui32>(val0) << 8) + ((val1 - val0) * (N & 0x00FFU));
    tmp += (1 << 7);  // rounding gives slightly better results
    ret = tmp >> 8;
  }
  return ret;
}

inline ui16 cbrt_lut_fine(ui16 N) {
  ui16 ret;
  if (N == 0U) {
    return 0U;
  }
  if (N == 65535U) {
    return 65535U;
  }
  size_t idx = N >> 6;  // Quantize pixel value to 10 bit (1024 bins)
  ui16 val0  = tbl_cbrt_fine[idx];
  ui16 val1  = (idx < 1023) ? tbl_cbrt_fine[idx + 1] : 65535U;
  ui32 tmp;
  if ((N & 0xFF) == 0) {
    ret = val0;
  } else {
    // Derive cubic root value by linear interpolation with LUT
    // ret = static_cast<ui16>(val0 + ((val1 - val0) / 64.0) * (N - (N & 0xFFC0)));
    tmp = (static_cast<ui32>(val0) << 6) + ((val1 - val0) * (N & 0x003FU));
    tmp += (1 << 5);  // rounding gives slightly better results
    ret = tmp >> 6;
  }
  return ret;
}

#endif  // IMAGE_IO_TEST_TBL_CBRT_H
